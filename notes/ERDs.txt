<!--=> Entity Relational Disagrams
==================================================== -->

<!-- 
The platform must allow users to register, create multiple blogs, and even allow the user to invite other users to be co-administrators of the blog. 
    create users and blogs, they need a connection
    a user can have many blogs
    a blog can have many users
    users m2m blogs = admin

The administrators of the blog can change the blog name, add posts, edit posts, add comments, edit comments for each post, and upload new files associated WITH THE BLOG POST. 
    admin already has access to blogs
    an admin can have many posts
    a post can only have one admin
    admin => posts   
    posts are accessible by all users
    a user can have many comments
    a comment can only have one user
    users => comments

    an admin can have many files
    a file can only one admin
    admin => files

We also want to capture information about which page the logged in USERS are viewing (IN THE BLOG) (e.g. page visited, when they visited, how long they stayed, IP address, name, etc).
    users & blogs
    a user can have many blogs
    a blog can have many users
    users m2m blog = page_views 
-->

<!--~ Database Design
<!--- Steps
    - START W/ITEM THAT WAS JUST CREATED
    - START ONE TO MANY LEFT TO RIGHT WITH BOTH

    1) A "1" CAN HAVE MANY OF "2" /or/ A "1" CAN ONLY HAVE ONE "2"
    2) A "2" CAN HAVE MANY OF "1" /or/ A "2" CAN ONLY HAVE ONE "1"
-->

<!--- One to One Relationships
    - CUSTOMERS TO ADDRESSES, OTHER UNIQUE DATA.
    - tables: CUSTOMERS, ADDRESSES 
    - CREATE SEPARATE TABLE (add address_id to CUSTOMERS, make ADDRESSES data spread over cols of new table)
-->

<!--- One to Many Relationsihps
    - CUSTOMERS TO ORDERS. ONE CUSTOMER CAN MAKE MANY ORDERS BUT THE ORDERS CAN ONLY BELONG TO ONE CUSTOMER.
    - tables: CUSTOMERS, addresses, ORDERS
    - PLACE PATH
    - need to put the ID of 'one' (customer_id) as a foreign key to the table of 'many' (orders)
-->

<!--- Many to Many Relationships
    - ORDERS TO ITEMS. ORDERS CAN HAVE MANY ITEMS, AND ITEMS CAN HAVE MANY ORDERS.
    - tables: customers, addresses, ORDERS, ITEMS
    - CREATE NEW TABLE CONNECTING THE TWO, CALL IT A NEW NAME. INCLUDES: order_id, and item_id, id 
-->
==================================================== -->

<!--~ Normalization
<!--- Form 1
    - each piece of data must be separated into separate cols
-->
<!--- Form 2
    - movies table. ID, title, year, category
    - categories repeat. bad. separate out category into its own table (id, name). 
    - the only thing that can ever repeat value is IDs
    - add category_id to movies table, replace values with corresponding numbers. comedy = 1, horro = 2, etc.
    - any repeated info in columns should be separated out, and replaced with ID
    - 
-->
<!--- Form 3
    - uncommon
    - books table. id, title, publisher name, publisher rank
    - if one changes, the other will change as well. this is bad, they are dependent on each other 
    - separate publisher (name and rank cols) to another table. id, pname, prank 
    - replace both columns with one publisher ID foreign key, which now referrs to both name and rank in separate table 
-->
<!--- Names
    - never include table name in col name of said table
-->
==================================================== -->

<!--~ Conventions
<!--- Guidelines (100% Necessary)
    - make table names plural and lowercase
    - use 'id' as a primary key. name it 'id' and make it auto-incremented
    - name foreign keys as: [singular name of the table you're referring to]_id (ex. user_id, lead_id, site_id, client_id, chapter_id, course_id, module_id)
    - use created_at and updated_at as columns for the timestamp in EVERY table you create.
-->
==================================================== -->

<!--~ Simple Data Types
<!--- VARCHAR(number of characters)
        Used to store non-numeric values that can be up to 255 characters. It is called a VARCHAR because it can store a variable number of characters and will only use the space required for each record that is stored in the database. VARCHAR should be used for values with different character lengths like an email, first_name, or last_name.

<!--- CHAR(number of characters)
        Also used to store non-numeric values, however, it will use up all space for the set number of characters regardless of what value is added. For instance, if I set CHAR(15), and I try to store the value "Coding", it will use up the equivalent of 15 characters even though "Coding" is only 6 characters long. Char is good to use for things that will always be a given number of characters. Char would work well for something like a state_abbreviation.

<!--- INT
        Used to store integers.
        The columns that you will find mostly using the INT are things like a unique identifier for each table. The majority of rows in a table will not exceed 2.1 billion records. INT is good to use for most normal number values like a phone_number or a zip_code.
        unsigned (positive numbers only) - can store numerical values from 0 up to 4294967295
        signed (positive and negative numbers) - can store numerical values from -2147483648 up to 2147483647

<!--- BIGINT
        BIGINT would be used for columns that would need to store huge numbers. In most cases, you wouldn't need BIGINT, but if you wanted to store something like a Facebook id when using Facebook's API, since they have over a billion users the id will need to be a data type of BIGINT.
        unsigned (again positive numbers only) - can store numerical values from 0 up to 18446744073709551615
        signed (positive and negative numbers) - can store numerical values from 9223372036854775807 to -9223372036854775808.

<!--- TINYINT
        TINYINT would be good to use for numbers that will be relatively small. A good example of something that would use a TINYINT is user level identifier (0 - inactive user, 1 - active user, 9 - admin).
            unsigned - can store numerical values from 0 up to 255
            signed - can store numerical values from -128 up to 127

<!--- FLOAT
        Used to store floating point numbers (numbers that need to have decimal places). An example column for this would be like an item_cost.

<!--- TEXT
        Used to store a large amount of text, like a description, message, or comment. Use this for any text that VARCHAR() is too small to handle.

<!--- DATETIME
        Used to store a date and time in the format YYYY-MM-DD hh:mm:ss
==================================================== -->

<!--~ Likes Example (FB)
<!--- Tables
    - users, posts, comments
-->
<!--- Relationships
    - one user can like many posts
    - one post can be liked by many users
    - MANY TO MANY
    - new table called likes. id, user id, post id
-->
==================================================== -->

<!--~ eCommerce Example
<!--- Tables
    - categories, products
-->
<!--- Relationships
    - one product has many categories
    - one category can have many products
    - create new table: categorizations. link b/t the two. both one to many to categories
-->
==================================================== -->

<!--~ Belts Example
<!--- Tables
    - users, belts
    - users: first last
    - belt: name
-->
<!--- Relationships
    - one user can have many belts
    - one belt can have many users
    - new table: belt_certifications. users id, belt id
-->
==================================================== -->
